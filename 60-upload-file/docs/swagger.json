{
    "swagger": "2.0",
    "info": {
        "description": "Add Route service to add, import, find and update ticketing route",
        "title": "60-upload-file",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8000",
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "Root"
                ],
                "summary": "Response this request with Hello Route.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseRoot"
                        }
                    }
                }
            }
        },
        "/api/v1/item": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "tags": [
                    "Items"
                ],
                "summary": "This endpoint will show all item data in JSON format, need too login and authorized as user or admin.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AllItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Request to create new item, need too login and authorized as user or admin.",
                "parameters": [
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorCreateItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        },
        "/api/v1/route": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Find all route, or find route with filter by from location or to location.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "query to search filter by 'from' location",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "query to search filter by 'to' location",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AllRoutes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Create new route, this feature need Role Admin.",
                "parameters": [
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateRouteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorCreateRouteValidation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        },
        "/api/v1/route/import": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Import Ticketing Route CSV file to App server, this feature only accessible by role admin.",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV route file to import",
                        "name": "routeFile",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RouteImportResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorCreateRouteValidation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        },
        "/api/v1/route/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Get route by id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Route id to search",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Update route by id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Route id to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRouteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RouteEditResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorUpdateRouteValidation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            }
        },
        "/api/v1/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get all user and search all user by name, this endpoint only available for role admin.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name to search",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AllUsers"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            }
        },
        "/api/v1/user/auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login user.",
                "parameters": [
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserAuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserAuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorUserNotFound"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            }
        },
        "/api/v1/user/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create new user, need role admin bearer token.",
                "parameters": [
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorEmailNotValid"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        },
        "/api/v1/user/create/admin": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create new user admin, need super admin secret key.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Your super admin secret-key",
                        "name": "secret-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorEmailNotValid"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorWrongSecretKey"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get current login user profile.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Find user by id, this feature need role admin.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id to search",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user by id, this feature need Role Admin.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id to edit",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserEditRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserEditResponseSuccess"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete user by id, this feature need Role Admin.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id to edit",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserDeleteResponseSuccess"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AllItem": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Item"
                    }
                }
            }
        },
        "models.AllRoutes": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Route"
                    }
                }
            }
        },
        "models.AllUsers": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.CreateItemRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Test Data"
                },
                "qty": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.CreateRouteRequest": {
            "type": "object",
            "required": [
                "departureTime",
                "from",
                "price",
                "to"
            ],
            "properties": {
                "departureTime": {
                    "type": "string",
                    "example": "09:00:00"
                },
                "from": {
                    "type": "string",
                    "example": "Malang"
                },
                "price": {
                    "type": "number",
                    "example": 200000
                },
                "to": {
                    "type": "string",
                    "example": "Jakarta"
                }
            }
        },
        "models.ErrorCreateItem": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "name and qty cannot be empty"
                }
            }
        },
        "models.ErrorCreateRouteValidation": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Field from, to, price, departureTime cannot be empty!"
                }
            }
        },
        "models.ErrorEmailNotValid": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "User validation failed: email: Please enter a valid email"
                }
            }
        },
        "models.ErrorMongoDBGet": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "failed to get data from mongodb, {error}"
                }
            }
        },
        "models.ErrorMongoDBUpset": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "failed to insert or update data to mongodb, {error}"
                }
            }
        },
        "models.ErrorUpdateRouteValidation": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Field price, departureTime cannot be empty!"
                }
            }
        },
        "models.ErrorUserNotFound": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "User Not Found!"
                }
            }
        },
        "models.ErrorWrongSecretKey": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "No secret-key provided or wrong secret-key!"
                }
            }
        },
        "models.Item": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "6336185fc31ad7ad4022ab87"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                },
                "name": {
                    "type": "string",
                    "example": "Test Data"
                },
                "qty": {
                    "type": "integer",
                    "example": 1
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                }
            }
        },
        "models.ResponseRoot": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "Hello, now we are able to import ticketing route data."
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "6336185fc31ad7ad4022ab87"
                },
                "name": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "models.Route": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "6336185fc31ad7ad4022ab87"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                },
                "departureTime": {
                    "type": "string",
                    "example": "09:00:00"
                },
                "from": {
                    "type": "string",
                    "example": "Malang"
                },
                "price": {
                    "type": "number",
                    "example": 200000
                },
                "to": {
                    "type": "string",
                    "example": "Jakarta"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                }
            }
        },
        "models.RouteEditResponseSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Route was updated successfully!"
                }
            }
        },
        "models.RouteImportResponseSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Route data has successfully imported!"
                }
            }
        },
        "models.Unauthorized": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "Unauthorized"
                }
            }
        },
        "models.UpdateRouteRequest": {
            "type": "object",
            "required": [
                "departureTime",
                "price"
            ],
            "properties": {
                "departureTime": {
                    "type": "string",
                    "example": "09:00:00"
                },
                "price": {
                    "type": "number",
                    "example": 200000
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "6336185fc31ad7ad4022ab87"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@email.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                }
            }
        },
        "models.UserAuthRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@email.com"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "models.UserAuthResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "6336185fc31ad7ad4022ab87"
                },
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTA2NTQyNjgsIm5iZiI6MTY2NDczNDI2OCwiaWF0IjoxNjY0NzM0MjY4LCJ1c2VySWQiOiI2MzM5Yzg4ZmMzMDMwZjNmM2RmMjUwNGUiLCJ1c2VyUm9sZXMiOlsiYWRtaW4iXX0.DKxQzeaLna3H8MS55nQ2p96KPA_LS3bHhoIrqcNaODQ"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@email.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                }
            }
        },
        "models.UserCreateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@email.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "models.UserCreateResponseSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User was registered successfully!"
                }
            }
        },
        "models.UserDeleteResponseSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User with id 631ea95d0770f442fd692fa8 was deleted successfully!"
                }
            }
        },
        "models.UserEditRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "models.UserEditResponseSuccess": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User was updated successfully!"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}