{
    "swagger": "2.0",
    "info": {
        "description": "GET item list from database and POST new item (save item data to mongo database)",
        "title": "40-mongodb",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8000",
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "Root"
                ],
                "summary": "Response this request with Hello Route.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseRoot"
                        }
                    }
                }
            }
        },
        "/api/v1/item": {
            "get": {
                "tags": [
                    "Items"
                ],
                "summary": "This endpoint will show all item data in JSON format, need too login and authorized as user or admin.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AllItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBGet"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Items"
                ],
                "summary": "Request to create new item, need too login and authorized as user or admin.",
                "parameters": [
                    {
                        "description": "request data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorCreateItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorMongoDBUpset"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AllItem": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Item"
                    }
                }
            }
        },
        "models.CreateItemRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Test Data"
                },
                "qty": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.ErrorCreateItem": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "name and qty cannot be empty"
                }
            }
        },
        "models.ErrorMongoDBGet": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "failed to get data from mongodb, {error}"
                }
            }
        },
        "models.ErrorMongoDBUpset": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": true
                },
                "message": {
                    "type": "string",
                    "example": "failed to insert or update data to mongodb, {error}"
                }
            }
        },
        "models.Item": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "6336185fc31ad7ad4022ab87"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                },
                "name": {
                    "type": "string",
                    "example": "Test Data"
                },
                "qty": {
                    "type": "integer",
                    "example": 1
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2022-09-30T05:12:47.469Z"
                }
            }
        },
        "models.ResponseRoot": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "Hello. Try GET/POST to /api/v1/item"
                }
            }
        }
    }
}