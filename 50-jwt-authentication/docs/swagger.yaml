definitions:
  models.AllItem:
    properties:
      count:
        example: 1
        type: integer
      data:
        items:
          $ref: '#/definitions/models.Item'
        type: array
    type: object
  models.AllUsers:
    properties:
      count:
        example: 1
        type: integer
      data:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.CreateItemRequest:
    properties:
      name:
        example: Test Data
        type: string
      qty:
        example: 1
        type: integer
    type: object
  models.ErrorCreateItem:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: name and qty cannot be empty
        type: string
    type: object
  models.ErrorEmailNotValid:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: 'User validation failed: email: Please enter a valid email'
        type: string
    type: object
  models.ErrorMongoDBGet:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: failed to get data from mongodb, {error}
        type: string
    type: object
  models.ErrorMongoDBUpset:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: failed to insert or update data to mongodb, {error}
        type: string
    type: object
  models.ErrorUserNotFound:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: User Not Found!
        type: string
    type: object
  models.ErrorWrongSecretKey:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: No secret-key provided or wrong secret-key!
        type: string
    type: object
  models.Item:
    properties:
      _id:
        example: 6336185fc31ad7ad4022ab87
        type: string
      createdAt:
        example: "2022-09-30T05:12:47.469Z"
        type: string
      name:
        example: Test Data
        type: string
      qty:
        example: 1
        type: integer
      updatedAt:
        example: "2022-09-30T05:12:47.469Z"
        type: string
    type: object
  models.ResponseRoot:
    properties:
      error:
        example: false
        type: boolean
      message:
        example: Hello, this is user service with JWT authentication
        type: string
    type: object
  models.Role:
    properties:
      _id:
        example: 6336185fc31ad7ad4022ab87
        type: string
      name:
        example: admin
        type: string
    type: object
  models.Unauthorized:
    properties:
      error:
        example: true
        type: boolean
      message:
        example: Unauthorized
        type: string
    type: object
  models.User:
    properties:
      _id:
        example: 6336185fc31ad7ad4022ab87
        type: string
      createdAt:
        example: "2022-09-30T05:12:47.469Z"
        type: string
      email:
        example: john.doe@email.com
        type: string
      name:
        example: John Doe
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      updatedAt:
        example: "2022-09-30T05:12:47.469Z"
        type: string
    type: object
  models.UserAuthRequest:
    properties:
      email:
        example: john.doe@email.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  models.UserAuthResponse:
    properties:
      _id:
        example: 6336185fc31ad7ad4022ab87
        type: string
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTA2NTQyNjgsIm5iZiI6MTY2NDczNDI2OCwiaWF0IjoxNjY0NzM0MjY4LCJ1c2VySWQiOiI2MzM5Yzg4ZmMzMDMwZjNmM2RmMjUwNGUiLCJ1c2VyUm9sZXMiOlsiYWRtaW4iXX0.DKxQzeaLna3H8MS55nQ2p96KPA_LS3bHhoIrqcNaODQ
        type: string
      email:
        example: john.doe@email.com
        type: string
      name:
        example: John Doe
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  models.UserCreateRequest:
    properties:
      email:
        example: john.doe@email.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: "123456"
        type: string
    type: object
  models.UserCreateResponseSuccess:
    properties:
      message:
        example: User was registered successfully!
        type: string
    type: object
  models.UserDeleteResponseSuccess:
    properties:
      message:
        example: User with id 631ea95d0770f442fd692fa8 was deleted successfully!
        type: string
    type: object
  models.UserEditRequest:
    properties:
      name:
        example: John Doe
        type: string
    type: object
  models.UserEditResponseSuccess:
    properties:
      message:
        example: User was updated successfully!
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Add User Service to manage user, authentication and role authorization
  title: 50-JWT-Authentication
  version: "1.0"
paths:
  /:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseRoot'
      summary: Response this request with Hello Route.
      tags:
      - Root
  /api/v1/item:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllItem'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBGet'
      security:
      - BearerAuth: []
      summary: This endpoint will show all item data in JSON format, need too login
        and authorized as user or admin.
      tags:
      - Items
    post:
      consumes:
      - application/json
      parameters:
      - description: request data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorCreateItem'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBUpset'
      security:
      - BearerAuth: []
      summary: Request to create new item, need too login and authorized as user or
        admin.
      tags:
      - Items
  /api/v1/user:
    get:
      consumes:
      - application/json
      parameters:
      - description: Name to search
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllUsers'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBGet'
      security:
      - BearerAuth: []
      summary: Get all user and search all user by name, this endpoint only available
        for role admin.
      tags:
      - User
  /api/v1/user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User id to edit
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDeleteResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBUpset'
      security:
      - BearerAuth: []
      summary: Delete user by id, this feature need Role Admin.
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: User id to search
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBGet'
      security:
      - BearerAuth: []
      summary: Find user by id, this feature need role admin.
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User id to edit
        in: path
        name: id
        required: true
        type: string
      - description: request data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserEditRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserEditResponseSuccess'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBUpset'
      security:
      - BearerAuth: []
      summary: Update user by id, this feature need Role Admin.
      tags:
      - User
  /api/v1/user/auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: request data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorUserNotFound'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBGet'
      summary: Login user.
      tags:
      - User
  /api/v1/user/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: request data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserCreateResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorEmailNotValid'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBUpset'
      security:
      - BearerAuth: []
      summary: Create new user, need role admin bearer token.
      tags:
      - User
  /api/v1/user/create/admin:
    post:
      consumes:
      - application/json
      parameters:
      - description: Your super admin secret-key
        in: header
        name: secret-key
        required: true
        type: string
      - description: request data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserCreateResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorEmailNotValid'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorWrongSecretKey'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBUpset'
      summary: Create new user admin, need super admin secret key.
      tags:
      - User
  /api/v1/user/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMongoDBGet'
      security:
      - BearerAuth: []
      summary: Get current login user profile.
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
